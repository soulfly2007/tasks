'''
Задание 2.
Функции, методы, тайпинги.
'''


# Реализовать функцию, которая принимает строку и возвращает ее в обратном порядке.
def reverse_string(s):
    return s[::-1]


# Реализовать фунекцию, которая принимает два параметра: число и степень - и возвращает это число,
# возведенное в степень.
# В случае, если степень не задана пользователем, используется значение 2.0.
def exponentiation(number, power=2.0):
    return number ** power


# Реализовать функцию, которая принимает произвольный набор параметров и возвращает кортеж, содержащий
# типы переданных параметров.
def args_to_tuple(*args):
    return tuple(map(type, args))


# Реализовать функцию, которая принимает произвольный набор именованных параметров и возвращает их
# группировку по типу в виде словаря.
# Например, если входные параметры заданы как `a=34, b='some text', c=2, d=1.3, e={1: 2}, f=-3.0`,
# то необходимо вернуть словарь следующего вида:
# {
#   int: [['a', 34], ['c', 2]],
#   str: [['b', 'some text']],
#   float: [['d', 1.3], ['f', -3.0]],
#   dict: [['e', {1: 2}]]
# }
def group_by_type(**kwargs):
    dictionary = {}
    for k, v in kwargs.items():
        dictionary.setdefault(type(v), []).append([k, v])
    return dictionary


# Реализовать функцию, которая принимает строку и произвольный набор неименованных и именованных параметров.
# Строка может содержать произвольный набор подстрок вида **, *index* или *name*.
# Вместо ** в строку должен быть подставлен символ *.
# Вместо *index* должен быть подставлен неименованный параметр с индексом index. Должна поддерживаться
# отрицательная индексация.
# Вместо *name* должен быть подставлен именованный параметр с именем name.
def make_string(string, *args, **kwargs):
    formatted_string = string.replace('**', '*')
    for i, arg in enumerate(args):
        for replacer in (f'*{i}*', f'*{i - len(args)}*'):
            formatted_string = formatted_string.replace(replacer, str(arg))
    for k, v in kwargs.items():
        formatted_string = formatted_string.replace(f'*{k}*', str(v))
    return formatted_string
